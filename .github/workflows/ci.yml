name: CI

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/ci-setup

      - name: Check Git version
        run: git --version

      - name: Setup mock Git user
        run: git config --global user.email "you@example.com" && git config --global user.name "Your Name"

      - name: Jest tests
        run: yarn jest --ci --color --runInBand --coverage --reporters=default --reporters=jest-junit

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/ci-setup

      - name: Typecheck
        run: yarn types:check

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/ci-setup

      - name: Lint
        run: yarn lint

  ci-ok:
    name: CI OK
    runs-on: ubuntu-latest
    if: always()
    needs: [test, typecheck, lint]
    env:
      FAILURE: ${{ contains(join(needs.*.result, ','), 'failure') }}
    steps:
      - name: Check for failure
        run: |
          echo $FAILURE
          if [ "$FAILURE" = "false" ]; then
            exit 0
          else
            exit 1
          fi
                    - název: Nastavení prostředí Node.js
  použití: actions/setup-node@v4.0.2
  s:
    # Nastavte vždy-auth v npmrc.
    always-auth: # volitelné, výchozí hodnota je false
    # Verze Specifikace verze, která se má použít. Příklady: 12.x, 10.15.1, >=10.15.0.
    node-version: # volitelné
    # Soubor obsahující specifikaci verze verze, kterou chcete použít. Příklady: package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # volitelné
    # Cílová architektura pro použití Node. Příklady: x86, x64. Ve výchozím nastavení bude používat architekturu systému.
    architektura: # volitelná
    # Nastavte tuto možnost, pokud chcete, aby akce zjišťovala nejnovější dostupnou verzi, která vyhovuje specifikaci verze.
    check-latest: # volitelné
    # Volitelný registr pro nastavení ověřování. Nastaví registr v souboru .npmrc a .yarnrc na úrovni projektu a nastaví auth pro čtení z env.NODE_AUTH_TOKEN.
    registr-url: # volitelné
    # Volitelný rozsah pro ověřování proti omezeným registrům. Při použití registru balíčků GitHub (https://npm.pkg.github.com/) se obrátí na vlastníka úložiště.
    rozsah: # volitelný
    # Používá se k vytažení distribucí uzlů z verzí uzlů. Protože existuje výchozí nastavení, uživatel jej obvykle nedodává. Při spuštění této akce na github.com je dostatečná výchozí hodnota. Když běžíte na GHES, můžete předat osobní přístupový token pro github.com, pokud se setkáte s omezením rychlosti.
    token: # volitelné, výchozí je ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Používá se k určení správce balíčků pro ukládání do mezipaměti ve výchozím adresáři. Podporované hodnoty: npm, yarn, pnpm.
    mezipaměť: # volitelné
    # Používá se k určení cesty k souboru závislostí: package-lock.json, yarn.lock atd. Podporuje zástupné znaky nebo seznam názvů souborů pro ukládání více závislostí do mezipaměti.
    cache-dependency-path: # volitelné
             
            - název: Setup Java JDK
  použití: actions/setup-java@v4.2.1
  s:
    # Verze Java k nastavení. Trvá celou nebo semver verzi Java. Podívejte se na příklady podporované syntaxe v souboru README
    java-version: # volitelné
    # Cesta k souboru `.java-version`. Podívejte se na příklady podporované syntaxe v souboru README
    java-version-file: # volitelné
    # Distribuce Java. Podívejte se na seznam podporovaných distribucí v souboru README
    rozdělení:
    # Typ balíčku (jdk, jre, jdk+fx, jre+fx)
    java-package: # volitelné, výchozí je jdk
    # Architektura balíčku (výchozí je architektura akčního běžce)
    architektura: # volitelná
    # Cesta k umístění komprimované sady JDK
    jdkFile: # volitelné
    # Nastavte tuto možnost, pokud chcete, aby akce zjišťovala nejnovější dostupnou verzi, která vyhovuje specifikaci verze
    check-latest: # volitelné
    # ID úložiště distributionManagement v souboru pom.xml. Výchozí je `github`
    server-id: # volitelné, výchozí je github
    # Název proměnné prostředí pro uživatelské jméno pro autentizaci do úložiště Apache Maven. Výchozí hodnota je $GITHUB_ACTOR
    server-username: # volitelné, výchozí je GITHUB_ACTOR
    # Název proměnné prostředí pro heslo nebo token pro autentizaci do úložiště Apache Maven. Výchozí hodnota je $GITHUB_TOKEN
    heslo serveru: # volitelné, výchozí je GITHUB_TOKEN
    # Cesta, kam bude zapsán soubor settings.xml. Výchozí je ~/.m2.
    cesta k nastavení: # volitelné
    # Přepište soubor settings.xml, pokud existuje. Výchozí hodnota je "true".
    overwrite-settings: # volitelné, výchozí hodnota je true
    # Soukromý klíč GPG k importu. Výchozí je prázdný řetězec.
    gpg-private-key: # volitelné
    # Název proměnné prostředí pro přístupovou frázi soukromého klíče GPG. Výchozí hodnota je $GPG_PASSPHRASE.
    gpg-passphrase: # volitelné
    # Název platformy pro sestavení závislostí mezipaměti. Může to být „maven“, „gradle“ nebo „sbt“.
    mezipaměť: # volitelné
    # Cesta k souboru závislostí: pom.xml, build.gradle, build.sbt atd. Tuto volbu lze použít s volbou `cache`. Pokud je tato možnost vynechána, akce vyhledá soubor závislosti v celém úložišti. Tato možnost podporuje zástupné znaky a seznam názvů souborů pro ukládání více závislostí do mezipaměti.
    cache-dependency-path: # volitelné
    # Řešení pro předání stavu úlohy k odeslání kroku úlohy. Tato proměnná není určena pro ruční nastavení
    job-status: # volitelné, výchozí je ${{ job.status }}
    # Token používaný k ověření při načítání manifestů verze hostovaných na github.com, například pro Microsoft Build of OpenJDK. Při spuštění této akce na github.com je dostatečná výchozí hodnota. Když běžíte na GHES, můžete předat osobní přístupový token pro github.com, pokud se setkáte s omezením rychlosti.
    token: # volitelné, výchozí je ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Název Maven Toolchain ID, pokud není požadován výchozí název "${distribution}_${java-version}". Podívejte se na příklady podporované syntaxe v souboru Advanced Usage
    mvn-toolchain-id: # volitelné
    # Jméno dodavatele Maven Toolchain, pokud není požadován výchozí název "${distribution}". Podívejte se na příklady podporované syntaxe v souboru Advanced Usage
    mvn-toolchain-vendor: # volitelné
                - název: Stáhněte si artefakt Build
  použití: actions/download-artifact@v4.1.7
  s:
    # Název artefaktu ke stažení. Pokud není specifikováno, stahují se všechny artefakty pro běh.
    jméno: # volitelné
    # Cílová cesta. Podporuje základní expanzi vlnovky. Výchozí hodnota je $GITHUB_WORKSPACE
    cesta: # volitelné
    # Vzor globu odpovídající artefaktům, které by měly být staženy. Ignorováno, pokud je zadáno jméno.
    vzor: # volitelné
    # Když se shoduje více artefaktů, změní se tím chování cílových adresářů. Pokud je true, stažené artefakty budou ve stejném adresáři určeném cestou. Pokud je hodnota false, stažené artefakty budou extrahovány do jednotlivých pojmenovaných adresářů v rámci zadané cesty.
    merge-multiple: # volitelné, výchozí hodnota je false
    # Token GitHub používaný k ověření pomocí rozhraní GitHub API. To je vyžadováno při stahování artefaktů z jiného úložiště nebo z jiného běhu pracovního postupu. Pokud toto není zadáno, akce se pokusí stáhnout artefakty z aktuálního úložiště a aktuálního běhu pracovního postupu.
    github-token: # volitelné
    # Vlastník úložiště a název úložiště spojené „/“. Pokud je zadán github-token, jedná se o úložiště, ze kterého se budou artefakty stahovat.
    úložiště: # volitelné, výchozí je ${{ github.repository }}
    # ID pracovního postupu, ze kterého byl nahrán požadovaný artefakt stahování. Pokud je zadán github-token, jedná se o běh, ze kterého se budou artefakty stahovat.
    run-id: # volitelné, výchozí je ${{ github.run_id }}
                  - název: Setup .NET Core SDK
  používá: actions/setup-dotnet@v4.0.0
  s:
    # Volitelné verze SDK k použití. Pokud není poskytnuta, nainstaluje verzi global.json, jakmile bude k dispozici. Příklady: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
    dotnet-version: # volitelné
    # Volitelná kvalita sestavení. Možné hodnoty jsou: daily, sign, validated, preview, ga.
    dotnet-quality: # volitelné
    # Volitelné umístění global.json, pokud váš global.json není umístěn v kořenovém adresáři úložiště.
    global-json-file: # volitelné
    # Volitelný zdroj balíčků, pro který se má nastavit ověřování. Zkontroluje všechny existující NuGet.config v kořenovém adresáři úložiště a poskytne dočasnou NuGet.config pomocí proměnné prostředí NUGET_AUTH_TOKEN jako ClearTextPassword
    source-url: # volitelné
    # Volitelný VLASTNÍK pro použití balíčků z organizací/uživatelů registru balíčků GitHub, kteří nejsou vlastníkem aktuálního úložiště. Používá se pouze v případě, že je v source-url uvedena také adresa URL GPR
    vlastník: # volitelné
    # Volitelné umístění NuGet.config, pokud váš NuGet.config není umístěn v kořenovém adresáři repozitáře.
    konfigurační soubor: # volitelné
    # Volitelný vstup pro povolení ukládání do mezipaměti složky NuGet global-packages
    mezipaměť: # volitelné
    # Používá se k určení cesty k souboru závislostí: packages.lock.json. Podporuje zástupné znaky nebo seznam názvů souborů pro ukládání více závislostí do mezipaměti.
    cache-dependency-path: # volitelné
                - název: První interakce
  použití: actions/first-interaction@v1.3.0
  s:
    # Token pro úložiště. Lze předat pomocí {{ secrets.GITHUB_TOKEN }}
    repo-token:
    # Komentář pro příspěvek k prvnímu vydání jednotlivce
    issue-Message: # volitelné
    # Komentář ke zveřejnění prvního požadavku jednotlivce
    pr-message: # volitelné
                    
          
